// ---------------------------------------------------------------------
// SHAPESBrushValues.mel
//
// This script retrieves the values from the context when the tool
// settings are initialized.
//
// ---------------------------------------------------------------------

global proc SHAPESBrushOptionValues( string $toolName )
{
    float $floatVals[];
    float $floatVal;
    int $intVal;

    $floatVals[0] = eval("SHAPESBrushContext -query -colorR " + $toolName);
    $floatVals[1] = eval("SHAPESBrushContext -query -colorG " + $toolName);
    $floatVals[2] = eval("SHAPESBrushContext -query -colorB " + $toolName);
    colorSliderGrp -edit -rgbValue $floatVals[0] $floatVals[1] $floatVals[2] SHAPESBrushBrushColor;

    $intVal = eval("SHAPESBrushContext -query -curve " + $toolName);
    SHAPESBrushSetSymbolCheckBox $intVal "curve";

    $intVal = eval("SHAPESBrushContext -query -depth " + $toolName);
    intSliderGrp -edit -value $intVal SHAPESBrushDepth;

    $intVal = eval("SHAPESBrushContext -query -depthStart " + $toolName);
    intField -edit -value $intVal SHAPESBrushDepthStart;

    $intVal = eval("SHAPESBrushContext -query -drawBrush " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushDrawBrushCheck;

    $intVal = eval("SHAPESBrushContext -query -invertFreeze " + $toolName);
    checkBox -edit -value $intVal SHAPESBrushInvertFreezeCheck;

    $intVal = eval("SHAPESBrushContext -query -invertPull " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushInvertPullCheck;

    $intVal = eval("SHAPESBrushContext -query -lineWidth " + $toolName);
    intFieldGrp -edit -value1 $intVal SHAPESBrushLineWidthField;

    $intVal = eval("SHAPESBrushContext -query -message " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushMessageTypeCheck;

    $floatVal = eval("SHAPESBrushContext -query -planeAngle " + $toolName);
    floatField -edit -value $floatVal SHAPESBrushPlaneAngleField;

    $intVal = eval("SHAPESBrushContext -query -relax " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushRelaxCheck;

    $floatVal = eval("SHAPESBrushContext -query -size " + $toolName);
    floatSliderGrp -edit -value $floatVal SHAPESBrushSize;

    $floatVal = eval("SHAPESBrushContext -query -smooth " + $toolName);
    floatSliderGrp -edit -value $floatVal SHAPESBrushSmooth;

    $floatVal = eval("SHAPESBrushContext -query -strength " + $toolName);
    floatSliderGrp -edit -value $floatVal SHAPESBrushStrength;

    $intVal = eval("SHAPESBrushContext -query -symmetry " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushUseSymmetryCheck;

    $intVal = eval("SHAPESBrushContext -query -symmetryAxis " + $toolName);
    SHAPESBrushPropertiesSetSymmetryAxis $intVal;

    $floatVal = eval("SHAPESBrushContext -query -tolerance " + $toolName);
    floatSliderGrp -edit -value $floatVal SHAPESBrushTolerance;

    $intVal = eval("SHAPESBrushContext -query -type " + $toolName);
    SHAPESBrushSetSymbolCheckBox $intVal "type";

    $intVal = eval("SHAPESBrushContext -query -usePlane " + $toolName);
    checkBox -edit -value $intVal SHAPESBrushUsePlaneCheck;

    $intVal = eval("SHAPESBrushContext -query -volume " + $toolName);
    checkBoxGrp -edit -value1 $intVal SHAPESBrushVolumeCheck;

    $intVal = 1;
    if (`displayPref -query -wireframeOnShadedActive` == "none")
        $intVal = 0;
    checkBoxGrp -edit -value1 $intVal SHAPESBrushShowWireframeCheck;

    $intVal = `optionVar -query SHAPESBrushIgnoreHistoryWarning`;
    checkBoxGrp -edit -value1 $intVal SHAPESBrushIgnoreHistoryCheck;
}


global proc SHAPESBrushValues( string $toolName )
{
    string $icon = "SHAPESBrush.svg";
    string $help = "";
    toolPropertySetCommon $toolName $icon $help;

    frameLayout -edit -enable 1 -collapse 0 SHAPESBrushFrame;
    SHAPESBrushOptionValues $toolName;

    toolPropertySelect SHAPESBrush;
}

// ---------------------------------------------------------------------
// MIT License
//
// Copyright (c) 2020 Ingo Clemens, brave rabbit
// SHAPESBrush is under the terms of the MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Author: Ingo Clemens    www.braverabbit.com
// ---------------------------------------------------------------------
